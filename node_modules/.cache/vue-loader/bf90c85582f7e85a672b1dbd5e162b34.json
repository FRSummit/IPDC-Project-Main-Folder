{"remainingRequest":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\ipdc-main-project\\src\\views\\ReportLandingPageParent.vue?vue&type=template&id=14e7ab72&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\src\\views\\ReportLandingPageParent.vue","mtime":1582624200631},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}