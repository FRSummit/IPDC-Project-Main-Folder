{"remainingRequest":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\ipdc-main-project\\src\\views\\ReportLandingPage.vue?vue&type=template&id=2da737a8&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\src\\views\\ReportLandingPage.vue","mtime":1582197939878},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\ipdc-main-project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}